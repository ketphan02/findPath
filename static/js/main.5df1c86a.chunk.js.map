{"version":3,"sources":["components/Square.tsx","algorithms/dfs.tsx","algorithms/bfs.tsx","components/GameGrid.tsx","components/Card.tsx","components/Menu.tsx","pages/FindPath.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","square","backgroundColor","sq","palette","background","default","secondary","main","primary","common","black","warning","light","borderRadius","shape","borderColor","borderStyle","borderWidth","margin","length","window","innerHeight","width","height","turn","Square","changeSq","loc","inSq","outSq","classes","Paper","elevation","className","onClick","color","current","timeout","delay","Promise","res","setTimeout","r","c","dfs","grid","gridChange","a","route","bestRoute","val","visited","Array","from","map","alert","x","y","i","v","u","newVisit","push","Node","next","this","Queue","head","tail","item","node","visit","add","isEmpty","peak","root","display","flexWrap","justifyContent","paper","padding","spacing","row","flexDirection","alignItems","GameGrid","algo","enqueueSnackbar","useSnackbar","React","gridValues","gridChanges","resetGrid","forEach","j","bfsApproach","dfsApproach","_","flexGrow","grey","A200","focusedPaper","image","maxWidth","maxHeight","Card","colorName","isChoosed","Grid","container","xs","Box","sm","Typography","variant","align","style","wrapper","title","marginTop","btn","white","dark","selectAlgo","marginBottom","formControl","minWidth","Menu","card","setCard","setAlgo","pendingAlgo","setPendingAlgo","direction","FormControl","InputLabel","id","Select","value","onChange","e","target","MenuItem","Button","gamepad","menu","FindPath","App","maxSnack","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5df1c86a.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Paper, makeStyles } from '@material-ui/core';\n\nimport { SquareType } from './GameGrid';\n\nexport type IOState = {\n  loc: React.MutableRefObject<null | [number, number]>;\n  color: React.MutableRefObject<null | React.Dispatch<\n    React.SetStateAction<SquareType>\n  >>;\n};\n\nexport interface SquareProps {\n  length: number;\n  sq: SquareType;\n  changeSq: React.Dispatch<React.SetStateAction<SquareType>>;\n  turn: SquareType;\n  loc: [number, number];\n  inSq: IOState;\n  outSq: IOState;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  square: {\n    backgroundColor: ({ sq }: SquareProps) => {\n      if (sq === null) return theme.palette.background.default;\n      if (sq === 0) return theme.palette.secondary.main;\n      if (sq === 1) return theme.palette.primary.main;\n      if (sq === 2) return theme.palette.common.black;\n      return theme.palette.warning.light;\n    },\n    borderRadius: theme.shape.borderRadius,\n    borderColor: 'black',\n    borderStyle: 'solid',\n    borderWidth: '0.2px',\n    margin: ({ length }: SquareProps) => window.innerHeight / (length * 20),\n    width: ({ length }: SquareProps) => window.innerHeight / (length * 1.3),\n    height: ({ length }: SquareProps) => window.innerHeight / (length * 1.3),\n    '&:hover': {\n      backgroundColor: ({ turn }: SquareProps) => {\n        if (turn === 0) return theme.palette.secondary.main;\n        if (turn === 1) return theme.palette.primary.main;\n        return theme.palette.common.black;\n      },\n    },\n  },\n}));\n\nconst Square: React.FC<SquareProps> = ({\n  length,\n  sq,\n  changeSq,\n  turn,\n  loc,\n  inSq,\n  outSq,\n}: SquareProps) => {\n  // const [x, y] = loc;\n  // console.log(x, y);\n  const classes = useStyles({\n    length,\n    sq,\n    changeSq,\n    turn,\n    loc,\n    inSq,\n    outSq,\n  });\n\n  const onClickSquare = () => {\n    if (sq === null || sq !== turn) {\n      if (turn === 0) {\n        if (inSq.color.current !== null) inSq.color.current(null);\n        inSq.color.current = changeSq;\n        inSq.loc.current = loc;\n      } else if (turn === 1) {\n        if (outSq.color.current !== null) outSq.color.current(null);\n        outSq.color.current = changeSq;\n        outSq.loc.current = loc;\n      }\n      changeSq(turn);\n    } else {\n      if (turn === 0 || turn === 1) {\n        inSq.loc.current = null;\n        inSq.color.current = null;\n      }\n      changeSq(null);\n    }\n  };\n\n  return (\n    <Paper elevation={0} className={classes.square} onClick={onClickSquare} />\n  );\n};\n\nexport default Square;\n","import React from 'react';\nimport { SquareType } from '../components/GameGrid';\n\nconst timeout = (delay: number) => new Promise((res) => setTimeout(res, delay));\n\ninterface bestRouteProp {\n  val: Array<[number, number]>;\n}\n\nconst r = [1, 0, 0, -1];\nconst c = [0, 1, -1, 0];\n\nconst dfs = async (\n  inSq: null | [number, number],\n  outSq: null | [number, number],\n  grid: Array<Array<SquareType>>,\n  gridChange: Array<Array<React.Dispatch<React.SetStateAction<SquareType>>>>,\n  route: Array<[number, number]> = [],\n  bestRoute: bestRouteProp = { val: [] },\n  visited: null | Array<Array<Boolean>> = null,\n) => {\n  if (!(inSq && outSq && grid && gridChange)) {\n    return false;\n  }\n  if (bestRoute.val.length !== 0 && bestRoute.val.length <= route.length) return null;\n\n  if (!visited) {\n    visited = Array.from({ length: grid.length }).map(() => Array.from({ length: grid.length }).map(() => false));\n  }\n\n  if (outSq[0] === inSq[0] && outSq[1] === inSq[1]) {\n    if ((bestRoute.val.length !== 0 && bestRoute.val.length > route.length) || (bestRoute.val.length === 0)) {\n      bestRoute.val = route;\n      alert(bestRoute.val);\n      // TO DO: highlight the route\n    }\n    return true;\n  }\n  const [x, y] = inSq;\n\n  if (grid[x][y] === null) gridChange[x][y](-1);\n  visited[x][y] = true;\n  await timeout(0.0000000000000001);\n\n  for (let i = 0; i < 4; ++i) {\n    const u = x + r[i];\n    const v = y + c[i];\n    if (u >= 0 && v >= 0 && u < grid.length && v < grid[0].length) {\n      if (grid[u][v] !== -1 && grid[u][v] !== 2 && visited[u][v] === false) {\n        const newVisit = [...route];\n        newVisit.push([u, v]);\n        await dfs([u, v], outSq, grid, gridChange, newVisit, bestRoute, visited);\n      }\n    }\n  }\n  if (grid[x][y] === -1 || grid[x][y] === null) {\n    gridChange[x][y](null);\n  }\n  visited[x][y] = false;\n  await timeout(0.0000000000000001);\n  return true;\n};\n\nexport default dfs;\n","// eslint-disable-next-line max-classes-per-file\nimport React from 'react';\nimport { SquareType } from '../components/GameGrid';\n\nclass Node<T> {\n  val: T;\n\n  next: Node<T> | null;\n\n  constructor(val: T, next: Node<T> | null = null) {\n    this.val = val;\n    this.next = next;\n  }\n}\n\nexport class Queue<T> {\n  head: Node<T> | null;\n\n  tail: Node<T> | null;\n\n  length: number;\n\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  getHead(): Node<T> | null {\n    return this.head;\n  }\n\n  getLength(): number | null {\n    return this.length;\n  }\n\n  add(item: T): void {\n    const node = new Node(item);\n    if (this.head === null) {\n      this.head = node;\n      this.tail = this.head;\n    } else {\n      if (this.tail) this.tail.next = node;\n      this.tail = node;\n    }\n    ++this.length;\n  }\n\n  peak(): T | null {\n    if (this.head === null) {\n      return null;\n    }\n    const node = this.head;\n    this.head = this.head.next;\n\n    --this.length;\n    return node.val;\n  }\n\n  isEmpty(): Boolean {\n    return this.head === null;\n  }\n}\n\nconst r = [1, 0, 0, -1];\nconst c = [0, 1, -1, 0];\n\nconst timeout = (delay: number) => new Promise((res) => setTimeout(res, delay));\n\nconst dfs = async (\n  inSq: [number, number] | null,\n  outSq: [number, number] | null,\n  grid: Array<Array<SquareType>>,\n  gridChange: Array<Array<React.Dispatch<React.SetStateAction<SquareType>>>>,\n) => {\n  if (inSq === null || outSq === null) {\n    return false;\n  }\n  const visited = Array.from({ length: grid.length }).map(() => Array.from({ length: grid.length }).map(() => false));\n\n  const visit: Queue<[number, number]> = new Queue();\n  visit.add(inSq);\n\n  while (!(visit.isEmpty())) {\n    const peak = visit.peak();\n    if (peak === null) return false;\n    const [x, y] = peak;\n    if (x === outSq[0] && y === outSq[1]) {\n      alert('Found');\n      return true;\n    }\n    if (grid[x][y] === null) gridChange[x][y](-1);\n\n    for (let i = 0; i < 4; ++i) {\n      const u = x + r[i];\n      const v = y + c[i];\n      if (u >= 0 && u < grid.length && v >= 0 && v < grid[0].length) {\n        if (!visited[u][v] && grid[u][v] !== 2) {\n          visit.add([u, v]);\n          visited[u][v] = true;\n        }\n      }\n    }\n    if (grid[x][y] === -1) gridChange[x][y](null);\n    if (visited[x][y]) await timeout(0.00001);\n    visited[x][y] = false;\n  }\n\n  return true;\n};\n\nexport default dfs;\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\n\nimport Square, { IOState } from './Square';\nimport { Algorithms } from '../pages/FindPath';\n\nimport dfsApproach from '../algorithms/dfs';\nimport bfsApproach from '../algorithms/bfs';\n\nexport type SquareType = null | -1 | 0 | 1 | 2;\n\nexport interface GridProps {\n  length: number;\n  turn: SquareType;\n  algo: Algorithms;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    backgroundColor: theme.palette.background.paper,\n    padding: `${theme.spacing(1)} ${theme.spacing(3)}`,\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n}));\n\nconst GameGrid = ({ length, turn, algo }: GridProps) => {\n  const classes = useStyles();\n\n  // Snackbar\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Starting points\n  const inSq: IOState = { loc: React.useRef(null), color: React.useRef(null) };\n  const outSq: IOState = { loc: React.useRef(null), color: React.useRef(null) };\n\n  // Grid\n  const grid = Array.from({ length }, () => Array.from({ length }, () => React.useState<SquareType>(null)));\n  const gridValues = grid.map((row) => row.map((val) => val[0]));\n  const gridChanges = grid.map((row) => row.map((val) => val[1]));\n\n  const resetGrid = async () => {\n    gridChanges.forEach((row, i) => row.forEach((val, j) => {\n      if (gridValues[i][j] === -1) {\n        val(null);\n      }\n    }));\n  };\n\n  React.useEffect(() => {\n    resetGrid();\n  }, [inSq.loc.current, outSq.loc.current]);\n\n  React.useEffect(() => {\n    if (algo) {\n      if (algo === 'BFS') {\n        if (!inSq.loc.current || !outSq.loc.current) {\n          enqueueSnackbar('No input or output found');\n        } else {\n          bfsApproach(inSq.loc.current, outSq.loc.current, gridValues, gridChanges);\n        }\n      } else if (algo === 'DFS') {\n        if (!inSq.loc.current || !outSq.loc.current) {\n          enqueueSnackbar('No input or output found');\n        } else {\n          dfsApproach(inSq.loc.current, outSq.loc.current, gridValues, gridChanges);\n        }\n      }\n    }\n  }, [algo]);\n\n  return (\n    <>\n      <div className={classes.root}>\n        {grid.map((row, i: number) => (\n          <div className={classes.row}>\n            {row.map((_, j: number) => (\n              <Square\n                length={length}\n                sq={gridValues[i][j]}\n                changeSq={gridChanges[i][j]}\n                turn={turn}\n                loc={[i, j]}\n                inSq={inSq}\n                outSq={outSq}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GameGrid;\n","import * as React from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Grid,\n  makeStyles,\n} from '@material-ui/core';\n\nexport interface CardProps {\n  colorName: string;\n  color: string;\n  isChoosed?: boolean;\n  onClick: () => void;\n}\n\ninterface CardStyle {\n  color: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    '&:hover': {\n      backgroundColor: theme.palette.grey.A200,\n    },\n  },\n  focusedPaper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    backgroundColor: theme.palette.grey.A200,\n  },\n  image: {\n    display: 'inline-block',\n    width: '100%',\n    height: '100%',\n    backgroundColor: ({ color }: CardStyle) => {\n      if (color === 'red') return theme.palette.secondary.main;\n      if (color === 'blue') return theme.palette.primary.main;\n      return theme.palette.common.black;\n    },\n  },\n  classes: {\n    margin: 'auto',\n    display: 'block',\n    maxWidth: '100%',\n    maxHeight: '100%',\n  },\n}));\n\nconst Card: React.FC<CardProps> = ({\n  colorName,\n  color,\n  isChoosed,\n  onClick,\n}: CardProps) => {\n  const classes = useStyles({ color });\n\n  return (\n    <div className={classes.root}>\n      <Paper\n        className={isChoosed ? classes.focusedPaper : classes.paper}\n        onClick={onClick}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs={4}>\n            <Box className={classes.image} />\n          </Grid>\n          <Grid item xs={8} sm>\n            <Typography\n              variant='body1'\n              align='center'\n              style={{ margin: 'auto' }}\n            >\n              {colorName}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n};\n\nexport default Card;\n","import * as React from 'react';\nimport {\n  makeStyles,\n  Grid,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n} from '@material-ui/core';\n\nimport ColorCard from './Card';\nimport { SquareType } from './GameGrid';\nimport { Algorithms } from '../pages/FindPath';\n\nexport interface MenuProps {\n  card: SquareType;\n  setCard: React.Dispatch<React.SetStateAction<SquareType>>;\n  setAlgo: React.Dispatch<React.SetStateAction<Algorithms>>;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n    height: '100%',\n    flexGrow: 1,\n  },\n  title: {\n    marginTop: '1rem',\n  },\n  btn: {\n    backgroundColor: theme.palette.warning.main,\n    color: theme.palette.common.white,\n    '&:hover': {\n      // color: theme.palette.common.black,\n      backgroundColor: theme.palette.warning.dark,\n    },\n  },\n  selectAlgo: {\n    marginBottom: '1rem',\n    // width: '100%',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: '100%',\n  },\n}));\n\nconst Menu: React.FC<MenuProps> = ({ card, setCard, setAlgo }: MenuProps) => {\n  const classes = useStyles();\n\n  const [pendingAlgo, setPendingAlgo] = React.useState<String | null>(null);\n\n  return (\n    <Grid container spacing={2} className={classes.wrapper}>\n      <Grid item xs={12}>\n        <Grid item xs={12}>\n          <Typography\n            variant='h3'\n            color='textPrimary'\n            align='center'\n            className={classes.title}\n          >\n            MENU\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <ColorCard\n            colorName='Current position'\n            color='red'\n            isChoosed={card === 0}\n            onClick={() => setCard(0)}\n          />\n          <ColorCard\n            colorName='Target'\n            color='blue'\n            isChoosed={card === 1}\n            onClick={() => setCard(1)}\n          />\n          <ColorCard\n            colorName='Obstacles'\n            color='black'\n            isChoosed={card === 2}\n            onClick={() => setCard(2)}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <Grid\n            container\n            spacing={0}\n            direction='column'\n            alignItems='center'\n            justifyContent='center'\n          >\n            <FormControl variant='outlined' className={classes.formControl}>\n              <InputLabel id='demo-simple-select-outlined-label'>\n                Algorithm\n              </InputLabel>\n              <Select\n                // native\n                value={pendingAlgo}\n                onChange={(e) => setPendingAlgo(e.target.value as string)}\n                variant='filled'\n                className={classes.selectAlgo}\n              >\n                <MenuItem value='BFS'>\n                  Breath First Sort\n                </MenuItem>\n                <MenuItem value='DFS'>\n                  Deep First Sort\n                </MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Grid\n            container\n            spacing={0}\n            direction='column'\n            alignItems='center'\n            justifyContent='center'\n          >\n            <Button\n              className={classes.btn}\n              variant='contained'\n              onClick={() => setAlgo(pendingAlgo as Algorithms)} // This will run the program\n            >\n              RUN ALGO\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Menu;\n","import * as React from 'react';\nimport { Grid, makeStyles } from '@material-ui/core';\n\nimport GameGrid, { SquareType } from '../components/GameGrid';\nimport Menu from '../components/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  gamepad: {\n    // backgroundColor: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n    padding: theme.spacing(1),\n  },\n  menu: {\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport type Algorithms = null | 'BFS' | 'DFS';\n\nconst FindPath = () => {\n  const classes = useStyles();\n  const [card, setCard] = React.useState<SquareType>(0);\n  const [algo, setAlgo] = React.useState<Algorithms>(null);\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={3} className={classes.menu}>\n        <Menu card={card} setCard={setCard} setAlgo={setAlgo} />\n      </Grid>\n      <Grid item xs={9} className={classes.gamepad}>\n        <GameGrid length={20} turn={card} algo={algo} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default FindPath;\n","import * as React from 'react';\nimport { SnackbarProvider } from 'notistack';\nimport FindPath from './pages/FindPath';\n\nconst App = () => (\n  <SnackbarProvider maxSnack={3}>\n    <FindPath />\n  </SnackbarProvider>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS,\n      getFID,\n      getFCP,\n      getLCP,\n      getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals())\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}